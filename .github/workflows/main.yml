name: CI

on: push

jobs:
    test:
        name: Build and Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              
            - uses: actions/setup-dotnet@v1
              with:
                dotnet-version: '3.1.100'
              
            - name: Build and Test
              run: |
                  dotnet build
                  dotnet test
                
            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v2
              with:
                  name: Bones3-Core DLL
                  path: Core/bin/Debug/netstandard2.0/Bones3-Core.dll

    deploy-preview:
        name: Deploy Preview
        needs: [test]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/dev'
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: '3.1.100'
              
            - name: Build
              run: dotnet build --version-suffix preview
              
            - name: Save Version Info
              id: get_version
              run: |
                  VERSION=$(find . -name Bones3-Core.dll -exec monodis --assembly {} ";" | grep -m 1 -Po "(?<=Version:).+" | tr -d '[:space:]')
                  echo "::set-output name=version_number::$VERSION"
                  echo "Deploying Bones3-Core version $VERSION"

            - name: Create Release Version
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.get_version.outputs.version_number }}
                  release_name: ${{ steps.get_version.outputs.version_number }}
                  draft: false
                  prerelease: true
                  body: Auto-generated Build version ${{ steps.get_version.outputs.version_number }}.

            - name: Create Zip Release
              run: zip -j build Core/bin/Debug/netstandard2.0/Bones3-Core.dll

            - name: Upload Release Zip
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./build.zip
                  asset_name: build_${{ steps.get_version.outputs.version_number }}.zip
                  asset_content_type: application/zip

    deploy-release:
        name: Deploy Release
        needs: [test]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/master'
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: '3.1.100'
              
            - name: Build
              run: dotnet build
              
            - name: Save Version Info
              id: get_version
              run: |
                  VERSION=$(find . -name Bones3-Core.dll -exec monodis --assembly {} ";" | grep -m 1 -Po "(?<=Version:).+" | tr -d '[:space:]')
                  echo "::set-output name=version_number::$VERSION"
                  echo "Deploying Bones3-Core version $VERSION"

            - name: Create Release Version
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.get_version.outputs.version_number }}
                  release_name: ${{ steps.get_version.outputs.version_number }}
                  draft: false
                  prerelease: false
                  body: Release version ${{ steps.get_version.outputs.version_number }}.

            - name: Create Zip Release
              run: zip -j build Core/bin/Debug/netstandard2.0/Bones3-Core.dll

            - name: Upload Release Zip
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./build.zip
                  asset_name: build_${{ steps.build_number.outputs.build_number }}.zip
                  asset_content_type: application/zip

    sonar:
        name: Send project to SonarCloud
        runs-on: ubuntu-latest
        needs: [test]

        steps:
            - uses: actions/checkout@v2

            - name: Deep Clone Repo (For Sonar Blame info)
              run: git fetch --prune --unshallow

            - name: Sonarscanner for dotnet
              uses: Secbyte/dotnet-sonarscanner@v2.2
              with:
                  buildCommand: dotnet build
                  testCommand: dotnet test
                  projectKey: TheDudeFromCI_Bones3-Rebuilt
                  projectName: Bones3-Rebuilt
                  sonarOrganisation: thedudefromci
                  beginArguments: >
                      /d:sonar.verbose="true"
                      /d:sonar.cs.opencover.reportsPaths='"src/Test/coverage.opencover.xml"'
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
